type MasterChef @entity {
  # Contract address
  id: ID!

#  owner: Bytes!
#  devAddress: Bytes!
#  treasuryAddress: Bytes!

  embrPerSec: BigInt!
  totalAllocPoint: BigInt!

  pools: [Pool!] @derivedFrom(field: "masterChef")
  poolCount: BigInt!

  #history: [History!]! @derivedFrom(field: "masterChef")

  timestamp: BigInt!
  block: BigInt!
}

type Pool @entity {
  # Index of pool in poolInfo on MasterChef contract
  id: ID!
  masterChef: MasterChef!
  pair: Bytes!

  rewarder: Rewarder

  allocPoint: BigInt!
  lastRewardBlock: BigInt!
  accEmbrPerShare: BigInt!

  slpBalance: BigInt!

  users: [User!]! @derivedFrom(field: "pool")
  userCount: BigInt!

  timestamp: BigInt!
  block: BigInt!
}

type Rewarder @entity {
  # address
  id: ID!
  rewardToken: Bytes!
  rewardPerSecond: BigInt!

  timestamp: BigInt!
  block: BigInt!
}

type User @entity {
  # Pool id concatenated with user address
  id: ID!

  address: Bytes!
  pool: Pool

  amount: BigInt!
  rewardDebt: BigInt!
  embrHarvested: BigInt!

  timestamp: BigInt!
  block: BigInt!
}

type Migrations @entity {
  id: ID!

  unclaimed: BigInt!
  claimed: BigInt!

  timestamp: BigInt!
  block: BigInt!
}


type Governance @entity { 
  id: ID!

  purposalCount: BigInt!
  purposals: [Purposal!] @derivedFrom(field: "governance")
  quorumVotes: BigInt!

  timestamp: BigInt!
  block: BigInt! 
}

type Purposal @entity { 
  id: ID!

  proposer: XUser!
  governance: Governance

  index: BigInt!
  title: String!
  duration: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  state:  BigInt!
  forVotes: BigInt!
  againstVotes: BigInt!
  metadata: String!
  details: String!
  executor: Bytes!
  executed: Boolean!

  timestamp: BigInt!
  block: BigInt!    
}

type XEmbr @entity {
  # Pool id concatenated with user address
  id: ID!

  tokenCount: BigInt!
  activeTokenCount: BigInt!
  staking: BigInt!

  rewards: [RewardInfo!]! @derivedFrom(field: "xembr")
  users: [XUser!] @derivedFrom(field: "xembr")

  userCount: BigInt!

  timestamp: BigInt!
  block: BigInt!
}

type RewardInfo @entity { 
  id: ID!

  xembr: XEmbr

  index: BigInt!
  address: Bytes!

  expiry: BigInt!
  active: Boolean!

  claimed: BigInt!
  unclaimed: BigInt!

  timestamp: BigInt!
  block: BigInt!
}

type XUser @entity {
  id: ID!

  owner: Bytes!
  xembr: XEmbr

  locks: [Lock!] @derivedFrom(field: "owner")
  rewards: [Reward!] @derivedFrom(field: "owner")
  purposals: [Purposal!] @derivedFrom(field: "proposer")

  staking: BigInt!
  claimed: [Claimed!] @derivedFrom(field: "owner")

  start: BigInt!
  expiry: BigInt!

  timestamp: BigInt!
  block: BigInt!
}

type Claimed @entity { 
  id: ID!
  
  owner: XUser
  address: Bytes!

  total: BigInt!

  timestamp: BigInt!
  block: BigInt!
}

type Reward @entity { 
  id: ID!
  
  owner: XUser

  index: BigInt!
  address: Bytes!
  
  claimed: BigInt!

  timestamp: BigInt!
  block: BigInt!
}

type Lock @entity { 
  id: ID!

  owner: XUser

  amount: BigInt!
  action: Int!
  locktime: BigInt!
  
  timestamp: BigInt!
  block: BigInt!
}